"use client";

import React from "react";

interface WellnessData {
  sleep: number;
  mood: number;
  energy: number;
  water: number;
  steps: number;
}

interface HealthDiaryProps {
  data: WellnessData;
  onDataChange: (data: WellnessData) => void;
}

const moodEmojis = ["üòî", "üòê", "üòä", "üòÉ", "ü•∞"];

export const HealthDiary: React.FC<HealthDiaryProps> = ({
  data,
  onDataChange,
}) => {
  const handleSliderChange = (category: keyof WellnessData, value: number) => {
    const newData = { ...data, [category]: value };
    onDataChange(newData);
  };

  const handleSave = () => {
    if (typeof window !== "undefined") {
      localStorage.setItem("healthDiaryData", JSON.stringify(data));
      alert("–î–∞–Ω–Ω—ã–µ –¥–Ω—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!");
    }
  };

  return (
    <section className="w-full max-w-2xl mx-auto p-6 bg-white rounded-2xl shadow-lg mt-8">
      <h2 className="text-2xl font-bold text-emerald-600 mb-6 text-center">
        –î–Ω–µ–≤–Ω–∏–∫ –∑–¥–æ—Ä–æ–≤—å—è
      </h2>
      <div className="space-y-6">
        {/* Mood Slider */}
        <div>
          <label
            htmlFor="mood"
            className="block text-slate-700 font-medium mb-2"
          >
            –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:{" "}
            <span className="text-xl">{moodEmojis[data.mood - 1]}</span>
          </label>
          <input
            type="range"
            id="mood"
            min="1"
            max="5"
            step="1"
            value={data.mood}
            onChange={(e) =>
              handleSliderChange("mood", parseInt(e.target.value))
            }
            className="w-full h-2 bg-green-100 rounded-lg appearance-none cursor-pointer accent-emerald-600"
          />
        </div>

        {/* Sleep Input */}
        <div>
          <label
            htmlFor="sleep"
            className="block text-slate-700 font-medium mb-2"
          >
            –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ (—á–∞—Å—ã):
          </label>
          <input
            type="number"
            id="sleep"
            step="0.5"
            value={data.sleep}
            onChange={(e) =>
              handleSliderChange("sleep", parseFloat(e.target.value))
            }
            className="w-full p-3 border border-green-200 rounded-lg focus:ring-2 focus:ring-emerald-600 focus:border-transparent transition-all"
            min="0"
            max="12"
            placeholder="8"
          />
          {data.sleep < 4 && (
            <p className="text-amber-500 text-sm mt-1">
              –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Å–ø–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 4 —á–∞—Å–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è.
            </p>
          )}
          {data.sleep > 12 && (
            <p className="text-amber-500 text-sm mt-1">
              –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ –≤—Ä–µ–¥–Ω–æ, —á–µ–º –µ–≥–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫.
            </p>
          )}
        </div>

        {/* Water Input */}
        <div>
          <label
            htmlFor="water"
            className="block text-slate-700 font-medium mb-2"
          >
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã (–º–ª):
          </label>
          <input
            type="number"
            id="water"
            step="50"
            value={data.water}
            onChange={(e) =>
              handleSliderChange("water", parseInt(e.target.value))
            }
            className="w-full p-3 border border-green-200 rounded-lg focus:ring-2 focus:ring-emerald-600 focus:border-transparent transition-all"
            min="0"
            max="5000"
            placeholder="2000"
          />
          {data.water >= 2000 && (
            <p className="text-emerald-600 text-sm mt-1">
              –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø—å–µ—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–¥—ã.
            </p>
          )}
        </div>

        {/* Energy Slider */}
        <div>
          <label
            htmlFor="energy"
            className="block text-slate-700 font-medium mb-2"
          >
            –≠–Ω–µ—Ä–≥–∏—è:{" "}
            <span className="text-xl">{moodEmojis[data.energy - 1]}</span>
          </label>
          <input
            type="range"
            id="energy"
            min="1"
            max="5"
            step="1"
            value={data.energy}
            onChange={(e) =>
              handleSliderChange("energy", parseInt(e.target.value))
            }
            className="w-full h-2 bg-green-100 rounded-lg appearance-none cursor-pointer accent-emerald-600"
          />
        </div>

        {/* Steps Input */}
        <div>
          <label
            htmlFor="steps"
            className="block text-slate-700 font-medium mb-2"
          >
            –®–∞–≥–∏:
          </label>
          <input
            type="number"
            id="steps"
            step="50"
            value={data.steps}
            onChange={(e) =>
              handleSliderChange("steps", parseInt(e.target.value))
            }
            className="w-full p-3 border border-green-200 rounded-lg focus:ring-2 focus:ring-emerald-600 focus:border-transparent transition-all"
            min="0"
            max="20000"
            placeholder="8000"
          />
          {data.steps >= 8000 && (
            <p className="text-emerald-600 text-sm mt-1">
              –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Å–≤–æ–µ–π —Ü–µ–ª–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!
            </p>
          )}
          {data.steps > 0 && data.steps < 8000 && (
            <p className="text-amber-500 text-sm mt-1">
              –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–≤–∏–≥–∞—Ç—å—Å—è! –ö–∞–∂–¥—ã–π —à–∞–≥ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ —Ü–µ–ª–∏.
            </p>
          )}
        </div>

        <button
          type="button"
          onClick={handleSave}
          className="w-full bg-emerald-600 hover:bg-emerald-700 text-white px-6 py-3 rounded-lg shadow-md transition-colors duration-300"
        >
          –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–Ω—è
        </button>
      </div>
      <p className="text-xs text-slate-500 mt-8 text-center">
        <span className="font-bold text-orange-500">Disclaimer:</span> –≠—Ç–æ
        –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º —Å–æ–≤–µ—Ç–æ–º.
      </p>
    </section>
  );
};

export default HealthDiary;
